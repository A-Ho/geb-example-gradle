import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

apply plugin: "groovy"
apply plugin: "idea"
apply from: "gradle/idea.gradle"
apply from: "gradle/ci.gradle"

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "commons-io:commons-io:2.4"
    }
}

repositories {
    jcenter()
}

// The drivers we want to use
ext.drivers = ["firefox", "chrome"]

dependencies {
    def gebVersion = "0.9.3"
    def seleniumVersion = "2.42.2"
    // If using Spock, need to depend on geb-spock
    testCompile "org.gebish:geb-spock:$gebVersion"
    testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:2.3.4"

    // If using JUnit, need to depend on geb-junit (3 or 4)
    testCompile "org.gebish:geb-junit4:$gebVersion"

    // Drivers
    drivers.each { driver ->
        testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
    }
}

task downloadChromeDriver {
    ext {
        chromeDriverVersion = "2.10"
    }
    def outputFile = file("gradle/webdriver/webdriver.zip")
    outputs.file(outputFile)

    doLast {
        def driverOsFilenamePart
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            driverOsFilenamePart = "win32"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            driverOsFilenamePart = "mac32"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            driverOsFilenamePart = Os.isArch("amd64") ? "linux64" : "linux32"
        }
        FileUtils.copyURLToFile(new URL("http://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${driverOsFilenamePart}.zip"), outputFile)
    }

}

task unzipChromeDriver(type: Copy) {
    def outputDir = file("gradle/webdriver/unzipped")
    dependsOn downloadChromeDriver
    outputs.dir(outputDir)

    from(zipTree(downloadChromeDriver.outputs.files.singleFile))
    into(outputDir)
}

drivers.each { driver ->
    task "${driver}Test"(type: Test) {
        reports {
            html.destination = reporting.file("$name/tests")
            junitXml.destination = file("$buildDir/test-results/$name")
        }

        outputs.upToDateWhen { false }  // Always run tests

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", driver

        // If you wanted to set the baseUrl in your buildâ€¦
        // systemProperty "geb.build.baseUrl", "http://myapp.com"
    }
}

chromeTest {
    dependsOn unzipChromeDriver
    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, "chromedriver")
}

test {
    dependsOn drivers.collect { tasks["${it}Test"] }
    enabled = false
}
